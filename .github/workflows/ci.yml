name: Adastra Data Platform Demo
on:
  push:
    branches:
      - main
jobs:

  terraform-infra:
    name: 'Terraform Infrastructure'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./data_platform/infrastructure/env/terraform/initial_setup/
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # Terraform Cloud token. I am using Terraform Cloud for better integration with AWS (AWS credentials are stored in Terraform Cloud)
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        # if: github.event_name == 'pull_request'
        run: terraform plan -no-color

        continue-on-error: true
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

  copy_to_aws:
    name: Upload to Amazon S3
    needs: terraform-infra
    runs-on: ubuntu-latest
    steps:
      - name: checkout-code
        uses: actions/checkout@main
        with:
          lfs: true
      - name: copy Glue Jobs
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-central-1
        run: data_platform/data_lake/glue_jobs/aws_ci_glue_jobs.sh
      - name: copy DAGs
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-central-1
        run: data_platform/airflow/aws_ci_dags.sh

  terraform-data-lake:
    name: 'Terraform Data Lake Tables'
    needs: copy_to_aws
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./data_platform/data_lake/
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # Terraform Cloud token. I am using Terraform Cloud for better integration with AWS (AWS credentials are stored in Terraform Cloud)
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        # if: github.event_name == 'pull_request'
        run: terraform plan -no-color

        continue-on-error: true
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve